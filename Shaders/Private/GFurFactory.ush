// Copyright 2018 GiM s.r.o. All Rights Reserved.

#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/VertexFactoryCommon.ush"
#include "/Engine/Private/GpuSkinCommon.ush"

#ifndef GPUSKIN_MORPH_BLEND
#define GPUSKIN_MORPH_BLEND 0
#endif

#ifndef GFUR_PHYSICS
#define GFUR_PHYSICS 0
#endif

#ifndef GPUSKIN_APEX_CLOTH
#define GPUSKIN_APEX_CLOTH 0
#endif

#ifndef GPUSKIN_USE_EXTRA_INFLUENCES
#define GPUSKIN_USE_EXTRA_INFLUENCES 0
#endif

#define FIXED_VERTEX_INDEX 0xFFFF

float3 MeshOrigin;
float3 MeshExtension;

float FurOffsetPower;
float MaxPhysicsOffsetLength;

#if GPUSKIN_APEX_CLOTH
/** Vertex buffer from which to read simulated positions of clothing. */
Buffer<float2> ClothSimulVertsPositionsNormals;
Buffer<float2> PreviousClothSimulVertsPositionsNormals;
/** blend weight between simulated positions and original key-framed animation */
float ClothBlendWeight;
#endif// #if GPUSKIN_APEX_CLOTH

struct FVertexFactoryInput
{
	float4	Position		: ATTRIBUTE0;
	// 0..1
	half3	TangentX		: ATTRIBUTE1;
	// 0..1
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ		: ATTRIBUTE2;	

#if FEATURE_LEVEL >= FEATURE_LEVEL_ES3_1 || COMPILER_METAL || COMPILER_VULKAN
	uint4	BlendIndices	: ATTRIBUTE3;
	#if GPUSKIN_USE_EXTRA_INFLUENCES
	uint4	BlendIndicesExtra	: ATTRIBUTE14;
	#endif
#else
	// Continue using int for SM3, compatibility of uint is unknown across SM3 platforms
	int4	BlendIndices	: ATTRIBUTE3;
	#if GPUSKIN_USE_EXTRA_INFLUENCES
	int4	BlendIndicesExtra	: ATTRIBUTE14;
	#endif
#endif
	float4	BlendWeights	: ATTRIBUTE4;	
#if GPUSKIN_USE_EXTRA_INFLUENCES
	float4	BlendWeightsExtra	: ATTRIBUTE15;
#endif

	float3	FurOffset		: ATTRIBUTE12;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX] : ATTRIBUTE5;

	#if NUM_MATERIAL_TEXCOORDS_VERTEX > 4
		#error Too many texture coordinate sets defined on GPUSkin vertex input. Max: 4.
	#endif
#endif

#if GPUSKIN_MORPH_BLEND
	// NOTE: TEXCOORD6,TEXCOORD7 used instead of POSITION1,NORMAL1 since those semantics are not supported by Cg 
	/** added to the Position */
	float3	DeltaPosition	: ATTRIBUTE9;	//POSITION1;
	/** added to the TangentZ and then used to derive new TangentX,TangentY, .w contains the weight of the tangent blend */
	float3	DeltaTangentZ	: ATTRIBUTE10;	//NORMAL1;
#elif GPUSKIN_APEX_CLOTH // exclusive with GPUSKIN_MORPH_BLEND
	// APEX cloth mesh-mesh mapping data
	// Barycentric Coordinate Data
	float4	BaryCoordPos	: ATTRIBUTE9;	
	float4	BaryCoordNormal	: ATTRIBUTE10;	
	float4	BaryCoordTangent: ATTRIBUTE11;
	uint4	SimulIndices	: ATTRIBUTE12;
#endif
	/** Per vertex color */
	float4 Color : ATTRIBUTE13;

	/** Optional instance ID for vertex layered rendering */
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4 && ONEPASS_POINTLIGHT_SHADOW && USING_VERTEX_SHADER_LAYER
	uint InstanceId	: SV_InstanceID;
#endif
	uint VertexId : SV_VertexID;
};

struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK

#if INTERPOLATE_VERTEX_COLOR
	float4 Color : COLOR0;
#endif

#if NUM_TEX_COORD_INTERPOLATORS
	float2	TexCoords[NUM_TEX_COORD_INTERPOLATORS]	: TEXCOORD0;
#endif

#if INSTANCED_STEREO
	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;
#endif
};

struct FVertexFactoryInterpolantsVSToDS
{
	FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
};

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS	
	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.TexCoords[CoordinateIndex];
	}
#endif

	half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif
	Result.UnMirrored = TangentToWorld2.w;
#if INTERPOLATE_VERTEX_COLOR
	Result.VertexColor = Interpolants.Color;
#else
	Result.VertexColor = 0;
#endif
	Result.TwoSidedSign = 1;
	return Result;
}

#if NEEDS_LIGHTMAP_COORDINATE
void GetLightMapCoordinates(FVertexFactoryInterpolantsVSToPS Interpolants, out float2 LightmapUV0, out float2 LightmapUV1)
{
	LightmapUV0 = LightmapUV1 = 0;
}

half2 GetShadowMapCoordinate(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}
#endif

#define FBoneMatrix float3x4

#if FEATURE_LEVEL >= FEATURE_LEVEL_ES3_1

// The bone matrix buffer stored as 4x3 (3 float4 behind each other), all chunks of a skeletal mesh in one, each skeletal mesh has it's own buffer
Buffer<float4> BoneMatrices;
// The previous bone matrix buffer stored as 4x3 (3 float4 behind each other), all chunks of a skeletal mesh in one, each skeletal mesh has it's own buffer
Buffer<float4> PreviousBoneMatrices;

#if GFUR_PHYSICS

Buffer<float4> BoneFurOffsets;
Buffer<float4> PreviousBoneFurOffsets;

#endif // GFUR_PHYSICS

#else

#undef GFUR_PHYSICS
#define GFUR_PHYSICS 0

#endif

// Cache data to avoid multiple calculation 
struct FVertexFactoryIntermediates
{
	// Blend Matrix (used for position/tangents)
	FBoneMatrix BlendMatrix;

	// Unpacked position
	float3 UnpackedPosition;
	
	// Tangent Basis
	float3x3 TangentToLocal; 

	// Vertex Color
	float4 Color;

#if GPUSKIN_APEX_CLOTH
	// in world space (non translated)
	float3 SimulatedPosition;
	// in world space (non translated)
	float3 PreviousSimulatedPosition;
#endif
	uint PrimitiveId;

};

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = mul(TangentToLocal, GetLocalToWorld3x3());
	Result.PreSkinnedPosition = Intermediates.UnpackedPosition.xyz;
	Result.PreSkinnedNormal = Input.TangentZ.xyz;

	// Assumes no instacing
	Result.PrevFrameLocalToWorld = Primitive.PreviousLocalToWorld;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for(int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Input.TexCoords[CoordinateIndex];
	}
#endif
	return Result;
}

#if GPUSKIN_APEX_CLOTH

// if false, fixed vertex
bool IsSimulatedVertex( FVertexFactoryInput Input )
{
	return (Input.SimulIndices.w < FIXED_VERTEX_INDEX);
}

float3 GetClothSimulPosition(int Index, bool bPrevious)
{
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4
	if(bPrevious)
	{
		return float3(PreviousClothSimulVertsPositionsNormals[Index * 3], PreviousClothSimulVertsPositionsNormals[Index * 3 + 1].x);
	}
	else
	{
		return float3(ClothSimulVertsPositionsNormals[Index * 3], ClothSimulVertsPositionsNormals[Index * 3 + 1].x);
	}
#else
	return APEXClothParam.Positions[Index];
#endif //FEATURE_LEVEL >= FEATURE_LEVEL_SM4
}

float3 GetClothSimulNormal(int Index, bool bPrevious)
{
#if FEATURE_LEVEL >= FEATURE_LEVEL_SM4
	if(bPrevious)
	{
		return float3(PreviousClothSimulVertsPositionsNormals[Index * 3 + 1].y, PreviousClothSimulVertsPositionsNormals[Index * 3 + 2]);
	}
	else
	{
		return float3(ClothSimulVertsPositionsNormals[Index * 3 + 1].y, ClothSimulVertsPositionsNormals[Index * 3 + 2]);
	}
#else
	return APEXClothParam.Normals[Index];
#endif //FEATURE_LEVEL >= FEATURE_LEVEL_SM4

}

float3 ClothingPosition( FVertexFactoryInput Input, bool bPrevious)
{
	float3 Position = Input.BaryCoordPos.x*(GetClothSimulPosition(Input.SimulIndices.x, bPrevious)+GetClothSimulNormal(Input.SimulIndices.x, bPrevious)*Input.BaryCoordPos.w)
					+ Input.BaryCoordPos.y*(GetClothSimulPosition(Input.SimulIndices.y, bPrevious)+GetClothSimulNormal(Input.SimulIndices.y, bPrevious)*Input.BaryCoordPos.w)
					+ Input.BaryCoordPos.z*(GetClothSimulPosition(Input.SimulIndices.z, bPrevious)+GetClothSimulNormal(Input.SimulIndices.z, bPrevious)*Input.BaryCoordPos.w);

	return float3(Position.xyz*MeshExtension + MeshOrigin);
}

#endif //#if GPUSKIN_APEX_CLOTH

/**
* Unpack position - uncompress xyz position to world position
*/
float3 UnpackedPosition( FVertexFactoryInput Input )
{
		return float3(Input.Position.xyz);
}

#if GPUSKIN_MORPH_BLEND
/** 
* Adds the delta position from the combined morph targets to the vertex position 
*/


float3 MorphPosition( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.UnpackedPosition + Input.DeltaPosition;
}
#endif

FBoneMatrix GetBoneMatrix(int Index)
{
#if FEATURE_LEVEL >= FEATURE_LEVEL_ES3_1
	float4 A = BoneMatrices[Index * 3];
	float4 B = BoneMatrices[Index * 3 + 1];
	float4 C = BoneMatrices[Index * 3 + 2];
	return FBoneMatrix(A,B,C);
#else
	return BonesFur.BoneMatrices[Index];
#endif
}

FBoneMatrix CalcBoneMatrix( FVertexFactoryInput Input )
{
	FBoneMatrix BoneMatrix = Input.BlendWeights.x * GetBoneMatrix(Input.BlendIndices.x);
	BoneMatrix += Input.BlendWeights.y * GetBoneMatrix(Input.BlendIndices.y);
	BoneMatrix += Input.BlendWeights.z * GetBoneMatrix(Input.BlendIndices.z);
	BoneMatrix += Input.BlendWeights.w * GetBoneMatrix(Input.BlendIndices.w);

#if GPUSKIN_USE_EXTRA_INFLUENCES
	BoneMatrix += Input.BlendWeightsExtra.x * GetBoneMatrix(Input.BlendIndicesExtra.x);
	BoneMatrix += Input.BlendWeightsExtra.y * GetBoneMatrix(Input.BlendIndicesExtra.y);
	BoneMatrix += Input.BlendWeightsExtra.z * GetBoneMatrix(Input.BlendIndicesExtra.z);
	BoneMatrix += Input.BlendWeightsExtra.w * GetBoneMatrix(Input.BlendIndicesExtra.w);
#endif

	return BoneMatrix;
}

FBoneMatrix GetPreviousBoneMatrix(int Index)
{
#if FEATURE_LEVEL >= FEATURE_LEVEL_ES3_1
	float4 A = PreviousBoneMatrices[Index * 3 + 0];
	float4 B = PreviousBoneMatrices[Index * 3 + 1];
	float4 C = PreviousBoneMatrices[Index * 3 + 2];
	return FBoneMatrix(A,B,C);
#else
	return BonesFur.BoneMatrices[Index];
#endif
}

FBoneMatrix CalcPreviousBoneMatrix( FVertexFactoryInput Input )
{
	FBoneMatrix BoneMatrix = Input.BlendWeights.x * GetPreviousBoneMatrix(Input.BlendIndices.x);
	BoneMatrix += Input.BlendWeights.y * GetPreviousBoneMatrix(Input.BlendIndices.y);
	BoneMatrix += Input.BlendWeights.z * GetPreviousBoneMatrix(Input.BlendIndices.z);
	BoneMatrix += Input.BlendWeights.w * GetPreviousBoneMatrix(Input.BlendIndices.w);
#if GPUSKIN_USE_EXTRA_INFLUENCES
	BoneMatrix += Input.BlendWeightsExtra.x * GetPreviousBoneMatrix(Input.BlendIndicesExtra.x);
	BoneMatrix += Input.BlendWeightsExtra.y * GetPreviousBoneMatrix(Input.BlendIndicesExtra.y);
	BoneMatrix += Input.BlendWeightsExtra.z * GetPreviousBoneMatrix(Input.BlendIndicesExtra.z);
	BoneMatrix += Input.BlendWeightsExtra.w * GetPreviousBoneMatrix(Input.BlendIndicesExtra.w);
#endif
	return BoneMatrix;
}

/** transform position by weighted sum of skinning matrices */
float3 SkinPosition( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
#if GPUSKIN_MORPH_BLEND
	float4 Position = float4(MorphPosition(Input, Intermediates),1);
#else
	float4 Position = float4(Intermediates.UnpackedPosition,1);
#endif

	// Note the use of mul(Matrix,Vector), bone matrices are stored transposed
	// for tighter packing.
	return mul( Intermediates.BlendMatrix, Position );
}

#if GFUR_PHYSICS

float3 CalcPrevBoneFurPhysicsOffset(int Index, float3 Position)
{
	return PreviousBoneFurOffsets[Index * 3].xyz + cross(Position - PreviousBoneFurOffsets[Index * 3 + 2].xyz, PreviousBoneFurOffsets[Index * 3 + 1].xyz);
}

float3 CalcBoneFurPhysicsOffset(int Index, float3 Position)
{
	return BoneFurOffsets[Index * 3].xyz + cross(Position - BoneFurOffsets[Index * 3 + 2].xyz, BoneFurOffsets[Index * 3 + 1].xyz);
}

#endif // GFUR_PHYSICS

/** transform position by weighted sum of skinning matrices */
float3 SkinPreviousPosition( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
#if GPUSKIN_MORPH_BLEND
	float3 Position = MorphPosition(Input, Intermediates);
#else
	float3 Position = Intermediates.UnpackedPosition;
#endif

	FBoneMatrix BlendMatrix = CalcPreviousBoneMatrix( Input );
	Position = mul( BlendMatrix, float4(Position, 1) );

	Position = mul(float4(Position, 1), Primitive.PreviousLocalToWorld).xyz;
#if GPUSKIN_APEX_CLOTH
	if( IsSimulatedVertex(Input) )
	{
		Position = lerp(Position, Intermediates.PreviousSimulatedPosition.xyz, ClothBlendWeight);
	}
#endif // GPUSKIN_APEX_CLOTH


#if NUM_MATERIAL_TEXCOORDS_VERTEX >= 2

	float3x3 LocalToWorld = Primitive.PreviousLocalToWorld;

	float3 FurOffset = Input.FurOffset;
	FurOffset = mul(BlendMatrix, float4(FurOffset.xyz, 0)).xyz;
	FurOffset = mul(FurOffset, LocalToWorld);

	// Remove scaling.
	half3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	float3 NormalVec = mul(Intermediates.TangentToLocal[2], LocalToWorld);

#if GFUR_PHYSICS

	float FurLength = length(FurOffset);

	float3 PhysicsOffset = Input.BlendWeights.x * CalcPrevBoneFurPhysicsOffset(Input.BlendIndices.x, Position);
	PhysicsOffset += Input.BlendWeights.y * CalcPrevBoneFurPhysicsOffset(Input.BlendIndices.y, Position);
	PhysicsOffset += Input.BlendWeights.z * CalcPrevBoneFurPhysicsOffset(Input.BlendIndices.z, Position);
	PhysicsOffset += Input.BlendWeights.w * CalcPrevBoneFurPhysicsOffset(Input.BlendIndices.w, Position);
#if GPUSKIN_USE_EXTRA_INFLUENCES
	PhysicsOffset += Input.BlendWeightsExtra.x * CalcPrevBoneFurPhysicsOffset(Input.BlendIndicesExtra.x, Position);
	PhysicsOffset += Input.BlendWeightsExtra.y * CalcPrevBoneFurPhysicsOffset(Input.BlendIndicesExtra.y, Position);
	PhysicsOffset += Input.BlendWeightsExtra.z * CalcPrevBoneFurPhysicsOffset(Input.BlendIndicesExtra.z, Position);
	PhysicsOffset += Input.BlendWeightsExtra.w * CalcPrevBoneFurPhysicsOffset(Input.BlendIndicesExtra.w, Position);
#endif // GPUSKIN_USE_EXTRA_INFLUENCES

	PhysicsOffset -= dot(PhysicsOffset, NormalVec) * NormalVec;
	PhysicsOffset *= pow(Input.TexCoords[1].x, FurOffsetPower);

	float PhysicOffsetLength = length(PhysicsOffset);
	float MaxPhysicsOffset = MaxPhysicsOffsetLength * FurLength;
	if (PhysicOffsetLength > MaxPhysicsOffset)
		PhysicsOffset *= MaxPhysicsOffset / PhysicOffsetLength;

	Position += normalize(FurOffset + PhysicsOffset) * FurLength;

#else // GFUR_PHYSICS

	Position += FurOffset;

#endif // GFUR_PHYSICS


#endif
	return Position + ResolvedView.PrevPreViewTranslation;
}
/** transform the tangent basis vectors */
float3x3 SkinTangents( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	float3x3 TangentToLocal;

	// tangent
	// -1..1
	half3 LocalTangentX = Input.TangentX;
	// -1..1 .xyz:normal, .w:contains sign of tangent basis determinant (left or right handed)
	half4 LocalTangentZ = Input.TangentZ;

#if GPUSKIN_MORPH_BLEND
	// calc new normal by offseting it with the delta
	LocalTangentZ.xyz = normalize(LocalTangentZ.xyz + Input.DeltaTangentZ);
	// derive the new tangent by orthonormalizing the new normal against
	// the base tangent vector (assuming these are normalized)
	LocalTangentX = normalize(LocalTangentX - dot(LocalTangentX, LocalTangentZ.xyz) * LocalTangentZ.xyz);
#else
	#if GPUSKIN_APEX_CLOTH

	float3x3 ClothTangent = float3x3(1,0,0, 0,1,0, 0,0,1);
	float TempClothBlendWeight = 0.0f;
	if( IsSimulatedVertex(Input) )
	{ 
		TempClothBlendWeight = ClothBlendWeight;

		bool bPrevious = false;

		float3 A = GetClothSimulPosition(Input.SimulIndices.x, bPrevious);
		float3 B = GetClothSimulPosition(Input.SimulIndices.y, bPrevious);
		float3 C = GetClothSimulPosition(Input.SimulIndices.z, bPrevious);

		float3 NA = GetClothSimulNormal(Input.SimulIndices.x, bPrevious);
		float3 NB = GetClothSimulNormal(Input.SimulIndices.y, bPrevious);
		float3 NC = GetClothSimulNormal(Input.SimulIndices.z, bPrevious);

		float3 NormalPosition = Input.BaryCoordNormal.x*(A+NA*Input.BaryCoordNormal.w)
								+ Input.BaryCoordNormal.y*(B+NB*Input.BaryCoordNormal.w)
								+ Input.BaryCoordNormal.z*(C+NC*Input.BaryCoordNormal.w);

		float3 TangentPosition = Input.BaryCoordTangent.x*(A+NA*Input.BaryCoordTangent.w)
								+ Input.BaryCoordTangent.y*(B+NB*Input.BaryCoordTangent.w)
								+ Input.BaryCoordTangent.z*(C+NC*Input.BaryCoordTangent.w);

		TangentToLocal[0] = normalize(TangentPosition*MeshExtension + MeshOrigin - Intermediates.SimulatedPosition);
		TangentToLocal[2] = normalize(NormalPosition*MeshExtension + MeshOrigin - Intermediates.SimulatedPosition);

		// cloth data are all in world space so need to change into local space
		TangentToLocal[0] = mul(TangentToLocal[0], (half3x3)Primitive.WorldToLocal);
		TangentToLocal[2] = mul(TangentToLocal[2], (half3x3)Primitive.WorldToLocal);

		// derive the new binormal by getting the cross product of the normal and tangent
		// and flip vector based on sign of tangent basis determinant
		TangentToLocal[1] = cross(TangentToLocal[2], TangentToLocal[0]) * LocalTangentZ.w;
	
		ClothTangent = TangentToLocal;
	}
	#endif // GPUSKIN_APEX_CLOTH

#endif // GPUSKIN_MORPH_BLEND

	// Note the use of mul(Matrix,Vector), bone matrices are stored transposed
	// for tighter packing.
	TangentToLocal[0] = mul( Intermediates.BlendMatrix, float4(LocalTangentX, 0) );
	TangentToLocal[2] = mul( Intermediates.BlendMatrix, float4(LocalTangentZ.xyz, 0) );

	// derive the new binormal by getting the cross product of the normal and tangent
	// and flip vector based on sign of tangent basis determinant
	TangentToLocal[1] = cross(TangentToLocal[2], TangentToLocal[0]) * LocalTangentZ.w;

#if GPUSKIN_APEX_CLOTH
	return ClothTangent * TempClothBlendWeight + TangentToLocal * (1.0f - TempClothBlendWeight);
#else
	return TangentToLocal;
#endif	// GPUSKIN_APEX_CLOTH
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;
	
	Intermediates.UnpackedPosition = UnpackedPosition(Input);
#if GPUSKIN_APEX_CLOTH
	if( IsSimulatedVertex(Input) )
	{
		Intermediates.PreviousSimulatedPosition = ClothingPosition(Input, true);
		Intermediates.SimulatedPosition = ClothingPosition(Input, false);
	}
	else
	{
		Intermediates.PreviousSimulatedPosition = Intermediates.SimulatedPosition = Intermediates.UnpackedPosition;
	}
	
#endif

	// DQ Note: This does not work with Scale
	Intermediates.BlendMatrix = CalcBoneMatrix( Input );

	// Fill TangentToLocal
	Intermediates.TangentToLocal = SkinTangents(Input, Intermediates);

	// Swizzle vertex color.
	Intermediates.Color = Input.Color FCOLOR_COMPONENT_SWIZZLE;

	return Intermediates;
}

float4 CalcWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3 Position;
#if GPUSKIN_APEX_CLOTH
	if( IsSimulatedVertex(Input) )
	{
		// skinned positions
		float4 SkinnedPosition = float4(SkinPosition(Input, Intermediates), 1);
		float4 TransformedSkinPos = mul(SkinnedPosition, Primitive.LocalToWorld);

		// Intermediates.SimulatedPosition is a clothing position in world coord
		float3 BlendedPos = lerp(TransformedSkinPos.xyz, Intermediates.SimulatedPosition, ClothBlendWeight);
		Position = BlendedPos;
	}
	else
#endif
	{
		Position = TransformLocalToWorld(SkinPosition(Input, Intermediates), Intermediates.PrimitiveId);
	}

#if NUM_MATERIAL_TEXCOORDS_VERTEX >= 2

	float3x3 LocalToWorld = GetLocalToWorld3x3();

	float3 FurOffset = Input.FurOffset;
	FurOffset = mul(Intermediates.BlendMatrix, float4(FurOffset.xyz, 0)).xyz;
	FurOffset = mul(FurOffset, LocalToWorld);

	// Remove scaling.
	half3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	float3 NormalVec = mul(Intermediates.TangentToLocal[2], LocalToWorld);

#if GFUR_PHYSICS

	float FurLength = length(FurOffset);

	float3 PhysicsOffset = Input.BlendWeights.x * CalcBoneFurPhysicsOffset(Input.BlendIndices.x, Position);
	PhysicsOffset += Input.BlendWeights.y * CalcBoneFurPhysicsOffset(Input.BlendIndices.y, Position);
	PhysicsOffset += Input.BlendWeights.z * CalcBoneFurPhysicsOffset(Input.BlendIndices.z, Position);
	PhysicsOffset += Input.BlendWeights.w * CalcBoneFurPhysicsOffset(Input.BlendIndices.w, Position);
#if GPUSKIN_USE_EXTRA_INFLUENCES
	PhysicsOffset += Input.BlendWeightsExtra.x * CalcBoneFurPhysicsOffset(Input.BlendIndicesExtra.x, Position);
	PhysicsOffset += Input.BlendWeightsExtra.y * CalcBoneFurPhysicsOffset(Input.BlendIndicesExtra.y, Position);
	PhysicsOffset += Input.BlendWeightsExtra.z * CalcBoneFurPhysicsOffset(Input.BlendIndicesExtra.z, Position);
	PhysicsOffset += Input.BlendWeightsExtra.w * CalcBoneFurPhysicsOffset(Input.BlendIndicesExtra.w, Position);
#endif // GPUSKIN_USE_EXTRA_INFLUENCES

	PhysicsOffset -= dot(PhysicsOffset, NormalVec) * NormalVec;
	PhysicsOffset *= pow(Input.TexCoords[1].x, FurOffsetPower);

	float PhysicOffsetLength = length(PhysicsOffset);
	float MaxPhysicsOffset = MaxPhysicsOffsetLength * FurLength;
	if (PhysicOffsetLength > MaxPhysicsOffset)
		PhysicsOffset *= MaxPhysicsOffset / PhysicOffsetLength;

	Position += normalize(FurOffset + PhysicsOffset) * FurLength;
	
#else // GFUR_PHYSICS

	Position += FurOffset;
	
#endif // GFUR_PHYSICS

#endif

	return float4(Position + ResolvedView.PreViewTranslation, 1);
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToLocal;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input, Intermediates);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float3x3 LocalToWorld = GetLocalToWorld3x3();

	// Remove scaling.
	half3 InvScale = Primitive.InvNonUniformScaleAndDeterminantSign.xyz;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;

	float3x3 TangentToWorld = mul(Intermediates.TangentToLocal, LocalToWorld);

	TangentToWorld0 = TangentToWorld[0];
	TangentToWorld2 = float4(TangentToWorld[2], Input.TangentZ.w * Primitive.InvNonUniformScaleAndDeterminantSign.w);
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3 TangentToWorld0; 
	float4 TangentToWorld2;
	CalcTangentToWorld(Input, Intermediates, TangentToWorld0, TangentToWorld2);

	return TangentToWorld2.xyz;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

#if NUM_TEX_COORD_INTERPOLATORS
	float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
	{
		Interpolants.TexCoords[CoordinateIndex] = CustomizedUVs[CoordinateIndex];
	}
#endif

	Interpolants.TangentToWorld0.w = 0;
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Interpolants.TangentToWorld2_Center = Interpolants.TangentToWorld2;
#endif

#if INTERPOLATE_VERTEX_COLOR
	Interpolants.Color = Intermediates.Color;
#endif

#if INSTANCED_STEREO
	Interpolants.EyeIndex = 0;
#endif

	return Interpolants;
}

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return float4(SkinPreviousPosition(Input, Intermediates), 1);
}


#if USING_TESSELLATION
float2 VertexFactoryGetTextureCoordinateDS( FVertexFactoryInterpolantsVSToDS Interpolants )
{
#if NUM_MATERIAL_TEXCOORDS
	return Interpolants.InterpolantsVSToPS.TexCoords[0].xy;
#else // #if NUM_MATERIAL_TEXCOORDS
	return float2(0,0);
#endif // #if NUM_MATERIAL_TEXCOORDS
}

FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
{
	return Input.InterpolantsVSToPS;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToDS Interpolants;
	
	Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
	
	return Interpolants;
}

/** Converts from vertex factory specific interpolants to a FMaterialTessellationParameters, which is used by material inputs. */
FMaterialTessellationParameters GetMaterialTessellationParameters(FVertexFactoryInterpolantsVSToDS Interpolants, float3 CameraLocalWorldPosition)
{
	FMaterialTessellationParameters	Result;
#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for (int CoordinateIndex = 0;CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex];
	}
#endif

	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;

#if INTERPOLATE_VERTEX_COLOR
	Result.VertexColor = Interpolants.InterpolantsVSToPS.Color;
#endif

	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );

	Result.TangentToWorldPreScale = 1;


	Result.WorldPosition = CameraLocalWorldPosition + ResolvedView.WorldCameraOrigin;

	return Result;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryInterpolate(FVertexFactoryInterpolantsVSToDS a, float aInterp, FVertexFactoryInterpolantsVSToDS b, float bInterp)
{
	FVertexFactoryInterpolantsVSToDS O;

	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld0.xyz);
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld2);
#if INTERPOLATE_VERTEX_COLOR
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.Color);
#endif

#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for(int tc = 0; tc < NUM_TEX_COORD_INTERPOLATORS; ++tc)
	{
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TexCoords[tc]);
	}
#endif

	return O;
}

float3x3 VertexFactoryGetTangentToLocalDS(FVertexFactoryInterpolantsVSToDS Interpolants)
{
	// This duplicates stuff already going on in GetMaterialTessellationParameters(), so
	// maybe the hull shader could leverage that instead?

	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;

	float3x3 TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
	
	return TangentToWorld;
}

#endif // #if USING_TESSELLATION

#if INSTANCED_STEREO
uint VertexFactoryGetEyeIndex(uint InstanceId)
{
	return InstanceId & 1;
}
#endif

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}
